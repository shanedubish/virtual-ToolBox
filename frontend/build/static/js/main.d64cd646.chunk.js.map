{"version":3,"sources":["components/About.js","components/Main.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["About","className","React","Component","Main","state","tools","createTool","event","preventDefault","axios","post","name","newTool","make","newMake","cost","newCost","location","newLocation","type","newType","image","newImage","then","response","setState","data","console","log","makeNewTool","target","value","makeNewMake","makeNewCost","makeNewLocation","makeNewType","makeNewImage","get","err","onSubmit","this","onKeyUp","placeholder","map","tool","i","src","alt","Nav","to","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d64cd646.chunk.js","sourcesContent":["import React from \"react\";\n\nclass About extends React.Component {\n  render() {\n    return (\n      <div className=\"about\">\n        <h3>About</h3>\n        <main>\n          <p>lots of stuff</p>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport axios from \"axios\";\nclass Main extends React.Component {\n  state = {\n    tools: [],\n  };\n  componentDidMount() {\n    axios\n      .get(\"http://127.0.0.1:8000/api/\", (err) => {\n        console.log(err);\n      })\n      .then((response) => {\n        this.setState({ tools: response.data });\n        console.log(this.state.tools);\n      });\n  }\n\n  createTool = (event) => {\n    event.preventDefault();\n    axios\n      .post(\"http://127.0.0.1:8000/api/create/\", {\n        name: this.state.newTool,\n        make: this.state.newMake,\n        cost: this.state.newCost,\n        location: this.state.newLocation,\n        type: this.state.newType,\n        image: this.state.newImage,\n      })\n      .then((response) => {\n        this.setState({ tools: response.data });\n        console.log(this.state.tools);\n        // window.location.reload(false);\n      });\n  };\n\n  makeNewTool = (event) => {\n    this.setState({ newTool: event.target.value });\n  };\n  makeNewMake = (event) => {\n    this.setState({ newMake: event.target.value });\n  };\n\n  makeNewCost = (event) => {\n    this.setState({ newCost: event.target.value });\n  };\n\n  makeNewLocation = (event) => {\n    this.setState({ newLocation: event.target.value });\n  };\n\n  makeNewType = (event) => {\n    this.setState({ newType: event.target.value });\n  };\n\n  makeNewImage = (event) => {\n    this.setState({ newImage: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <h3>Main Page</h3>\n\n        <div className=\"t\">\n          <h2>Add a Tool to your ToolBox</h2>\n          <form className=\"addcar\" onSubmit={this.createTool}>\n            <input\n              onKeyUp={this.makeNewTool}\n              type=\"text\"\n              placeholder=\"Tool Name\"\n            />\n            <br />\n\n            <input onKeyUp={this.makeNewType} type=\"text\" placeholder=\"Type\" />\n            <br />\n            <input\n              onKeyUp={this.makeNewMake}\n              type=\"text\"\n              placeholder=\"Tool Make\"\n            />\n            <br />\n            <input onKeyUp={this.makeNewCost} type=\"text\" placeholder=\"Cost \" />\n            <br />\n            <input\n              onKeyUp={this.makeNewLocation}\n              type=\"text\"\n              placeholder=\"Location\"\n            />\n            <br />\n            <input\n              onKeyUp={this.makeNewImage}\n              type=\"text\"\n              placeholder=\"Image\"\n            />\n            <br />\n            <input\n              type=\"submit\"\n              value=\"Create New Car\"\n              className=\"btn-sm btn-primary\"\n            />\n          </form>\n        </div>\n\n        <main>\n          {this.state.tools.map((tool, i) => {\n            return (\n              <div className=\"oneTool\">\n                <img src={tool.image} alt=\"\" />\n                <h3>{tool.name}</h3>\n                <h3>{tool.make}</h3>\n\n                <h3>{tool.location}</h3>\n                <h3>{tool.type}</h3>\n              </div>\n            );\n          })}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Nav extends React.Component {\n  render() {\n    return (\n      <nav>\n        <Link to=\"/\">About</Link>\n        <Link to=\"/main\">Main</Link>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport About from \"./components/About.js\";\nimport Main from \"./components/Main.js\";\nimport Navigation from \"./components/Nav.js\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Navigation />\n        <Route path=\"/\" exact component={About} />\n        <Route path=\"/main\" exact component={Main} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}